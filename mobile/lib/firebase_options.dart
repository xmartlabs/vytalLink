// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:package_info_plus/package_info_plus.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static Future<FirebaseOptions> get currentPlatform async {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        final info = await PackageInfo.fromPlatform();
        return androidFor(info.packageName);
      case TargetPlatform.iOS:
        final info = await PackageInfo.fromPlatform();
        return iosFor(info.packageName);
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions androidProd = FirebaseOptions(
    apiKey: 'AIzaSyCyqpMJxEjyTElljNEaUnft7xwHlCL0eIs',
    appId: '1:431287049874:android:dca1dc78b2e1021ac1d04b',
    messagingSenderId: '431287049874',
    projectId: 'vytallink',
    storageBucket: 'vytallink.firebasestorage.app',
  );

  static final FirebaseOptions androidDev = FirebaseOptions(
    apiKey: 'AIzaSyCyqpMJxEjyTElljNEaUnft7xwHlCL0eIs',
    appId: '1:431287049874:android:3d51f168a4604cf4c1d04b',
    messagingSenderId: '431287049874',
    projectId: 'vytallink',
    storageBucket: 'vytallink.firebasestorage.app',
  );

  static FirebaseOptions androidFor(String packageName) {
    switch (packageName) {
      case 'com.xmartlabs.vytallink.dev':
        return androidDev;
      case 'com.xmartlabs.vytallink':
      default:
        return androidProd;
    }
  }

  static final FirebaseOptions iosProd = FirebaseOptions(
    apiKey: 'AIzaSyCpbKAC3GW7lSHKdffpBHEkx45ktyR38Ik',
    appId: '1:431287049874:ios:2d36619e874c5402c1d04b',
    messagingSenderId: '431287049874',
    projectId: 'vytallink',
    storageBucket: 'vytallink.firebasestorage.app',
    iosBundleId: 'com.xmartlabs.vytallink',
  );

  static final FirebaseOptions iosDev = FirebaseOptions(
    apiKey: 'AIzaSyCpbKAC3GW7lSHKdffpBHEkx45ktyR38Ik',
    appId: '1:431287049874:ios:367a40c8cddbb55dc1d04b',
    messagingSenderId: '431287049874',
    projectId: 'vytallink',
    storageBucket: 'vytallink.firebasestorage.app',
    iosBundleId: 'com.xmartlabs.vytallink.dev',
  );

  static FirebaseOptions iosFor(String bundleId) {
    switch (bundleId) {
      case 'com.xmartlabs.vytallink.dev':
        return iosDev;
      case 'com.xmartlabs.vytallink':
      default:
        return iosProd;
    }
  }
}
